{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"entries",
				"entries"
			],
			[
				"connect",
				"connect_db"
			],
			[
				"cur",
				"cursor"
			],
			[
				"ma",
				"mariadb_connection"
			],
			[
				"u",
				"USERNAME"
			],
			[
				"he",
				"height"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "<!doctype html>\n<title>Flaskr</title>\n<link rel=stylesheet type=text/css href=\"{{ url_for('static', filename='style.css') }}\">\n<div class=page>\n  	<h1><a href=\"{{url_for('show_entries')}}\">GSS Annonymous</a></h1>\n  	<div class=metanav>\n	  <!-- {% if not session.logged_in %}\n	    	<a href=\"{{ url_for('login') }}\">log in</a>\n	  {% else %}\n	    	<a href=\"{{ url_for('logout') }}\">log out</a>\n	  {% endif %} -->\n	  <a href=\"{{url_for('board1')}}\">board1</a>\n	  <a href=\"{{url_for('board2')}}\">board2</a>\n	</div>\n		{% for message in get_flashed_messages() %}\n	    		<div class=flash>{{ message }}</div>\n	  	{% endfor %}\n  {% block body %}{% endblock %}\n</div>\n",
			"file": "templates/layout.html",
			"file_size": 716,
			"file_write_time": 130799430536784976,
			"settings":
			{
				"buffer_size": 657,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# all the import\nfrom __future__ import with_statement\nimport sqlite3\nimport MySQLdb as mariadb\nfrom flask import Flask, request, session, g, redirect, url_for, abort, render_template, flash\nfrom contextlib import closing\n\n#configuration\nDATABASE = '/tmp/flaskr.db'\nDEBUG = True\nSECRET_KEY = '1234'\nUSERNAME = 'admin'\nPASSWORD = 'wjdtnsgud1!'\n\n#create our little application\napp=Flask(__name__)\napp.config.from_object(__name__)\n\ndef connect_db():\n	return mariadb.connect('localhost','root', 'wjdtnsgud1!','annonymous')\n#	return sqlite3.connect(app.config['DATABASE'])\n\ndef init_db():\n	with closing(connect_db()) as db:\n		with app.open_resource('schema.sql') as f:\n			db.cursor().executescript(f.read())\n		db.commit()\n\n# @app.before_request\n# def before_request():\n# 	con=connect_db()\n# #	g.db=connect_db()\n	\n# @app.teardown_request\n# def teardown_request(exception):\n# #	g.db.close()\n# 	con.close()\n\n@app.route('/')\ndef show_entries():\n#	cur=g.db.execute('select title, text from entries order by id desc')\n	con=connect_db()\n	cursor=con.cursor()\n	cursor.execute('select title, text from entries order by id desc')\n	entries=[dict(title=row[0], text=row[1]) for row in cursor.fetchall()]\n	cursor.close()\n	con.close()\n	return render_template('show_entries.html', entries=entries)\n\n@app.route('/add', methods=['POST'])\ndef add_entry():\n	# if not session.get('logged_in'):\n	# 	abort(401)\n	con=connect_db()\n	cursor=con.cursor()\n	table=board\n	cursor.execute('insert into entries (title, text) values (%s,%s)',[request.form['title'], request.form['text']])\n	con.commit()\n	cursor.close()\n	con.close()\n#	con.cursor().execute('insert into entries (title, text) values (?,?)',[request.form['title'], request.form['text']])\n#	con.commit()\n	flash('New entry was successfully posted')\n	return redirect(url_for('show_entries'))\n\n@app.route('/add1', methods=['POST'])\ndef add1():\n	# if not session.get('logged_in'):\n	# 	abort(401)\n	con=connect_db()\n	cursor=con.cursor()\n	cursor.execute('insert into board1 (title, text) values (%s,%s)',[request.form['title'], request.form['text']])\n	con.commit()\n	cursor.close()\n	con.close()\n#	con.cursor().execute('insert into entries (title, text) values (?,?)',[request.form['title'], request.form['text']])\n#	con.commit()\n	flash('New entry was successfully posted')\n	return redirect(url_for('board1'))\n\n@app.route('/add2', methods=['POST'])\ndef add2():\n	# if not session.get('logged_in'):\n	# 	abort(401)\n	con=connect_db()\n	cursor=con.cursor()\n	cursor.execute('insert into board2 (title, text) values (%s,%s)',[request.form['title'], request.form['text']])\n	con.commit()\n	cursor.close()\n	con.close()\n#	con.cursor().execute('insert into entries (title, text) values (?,?)',[request.form['title'], request.form['text']])\n#	con.commit()\n	flash('New entry was successfully posted')\n	return redirect(url_for('board2'))\n\n# @app.route('/login', methods=['GET','POST'])\n# def login():\n# 	error=None\n# 	if request.method=='POST':\n# 		if request.form['username'] != app.config['USERNAME']:\n# 			error='invalid username'\n# 		elif request.form['password'] != app.config['PASSWORD']:\n# 			error='invalid password'\n# 		else:\n# 			session['logged_in']=True\n# 			flash('You were logged in')\n# 			return redirect(url_for('show_entries'))\n# 	return render_template('login.html', error=error)\n	\n@app.route('/logout')\ndef logout():\n	session.pop('logged_in', None)\n	flash('You were logged out')\n	return redirect(url_for('show_entries'))\n\n@app.route('/board1')\ndef board1():\n	con=connect_db()\n	cursor=con.cursor()\n	cursor.execute('select title,text from board1 order by id desc')\n	writings=[dict(title=row[0], text=row[1]) for row in cursor.fetchall()]\n	cursor.close()\n	con.close()\n	return render_template('board1.html', writings=writings)\n\n@app.route('/board2')\ndef board2():\n	con=connect_db()\n	cursor=con.cursor()\n	cursor.execute('select title,text from board2 order by id desc')\n	writings=[dict(title=row[0], text=row[1]) for row in cursor.fetchall()]\n	cursor.close()\n	con.close()\n	return render_template('board2.html', writings=writings)\n\nif __name__=='__main__':\n	app.run()\n",
			"file": "flaskr.py",
			"file_size": 4051,
			"file_write_time": 130799430655504975,
			"settings":
			{
				"buffer_size": 4077,
				"line_ending": "Unix"
			}
		},
		{
			"file": "templates/board1.html",
			"settings":
			{
				"buffer_size": 551,
				"line_ending": "Unix"
			}
		},
		{
			"file": "templates/board2.html",
			"settings":
			{
				"buffer_size": 551,
				"line_ending": "Unix"
			}
		},
		{
			"file": "static/style.css",
			"settings":
			{
				"buffer_size": 918,
				"line_ending": "Unix"
			}
		},
		{
			"file": "templates/show_entries.html",
			"settings":
			{
				"buffer_size": 555,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "{% extends \"layout.html\" %}\n{% block body %}\n  <h2>Login</h2>\n  {% if error %}<p class=error><strong>Error:</strong> {{ error }}{% endif %}\n  <form action=\"{{ url_for('login') }}\" method=post> \n    <dl>\n      <dt>Username:\n      <dd><input type=\"text\" name=\"username\">\n      <dt>Password:\n      <dd><input type=\"password\" name=\"password\">\n      <dd><input type=\"submit\" value=\"Login\">\n    </dl>\n  </form>\n{% endblock %}",
			"file": "templates/login.html",
			"file_size": 418,
			"file_write_time": 130798242573153957,
			"settings":
			{
				"buffer_size": 419,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix",
				"name": "Xdebug Stack",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"contents": "=> /home/ggs134/python/flaskr.py\n	|+| 55\n=> /home/ggs134/python/flaskr.py.project\n	|+| 52\n",
			"settings":
			{
				"buffer_size": 90,
				"line_ending": "Unix",
				"name": "Xdebug Breakpoint",
				"read_only": true,
				"scratch": true
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 75.0,
		"last_filter": "install package",
		"selected_items":
		[
			[
				"install package",
				"Package Control: Install Package"
			],
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"pa in",
				"Package Control: Install Package"
			],
			[
				"package Control i",
				"Package Control: Install Package"
			],
			[
				"tag",
				"Set Syntax: Java Server Page (JSP)"
			]
		],
		"width": 521.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"exit",
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib2,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')",
			"import urllib2,os,hashlib; h = '2deb499853c4371624f5a07e27c334aa' + 'bf8c4e67d14fb0525ba4f89698a6d7e1'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')",
			"import urllib.request,os,hashlib; h = '2deb499853c4371624f5a07e27c334aa' + 'bf8c4e67d14fb0525ba4f89698a6d7e1'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/ggs134/python",
		"/home/ggs134/python/templates"
	],
	"file_history":
	[
		"/home/ggs134/.config/sublime-text-3/Packages/User/Xdebug.sublime-settings",
		"/home/ggs134/.config/sublime-text-3/Packages/Xdebug Client/Xdebug.sublime-settings",
		"/home/ggs134/python/templates/board1.html",
		"/home/ggs134/python/untitled.sublime-project",
		"/home/ggs134/python/flaskr.py.project",
		"/home/ggs134/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/ggs134/python/schema.sql",
		"/home/ggs134/python/static/style.css",
		"/home/ggs134/oauth/OAuth2.0/project.py",
		"/home/ggs134/python/flaskr.py",
		"/home/ggs134/canvas/canvas2.html",
		"/home/ggs134/바탕화면/Altari/FundInvest.html",
		"/home/ggs134/바탕화면/Altari/login.html",
		"/home/ggs134/바탕화면/Altari/css/custom.css",
		"/home/ggs134/바탕화면/Altari/index.html",
		"/home/ggs134/바탕화면/Altari/Fund&Invest Music",
		"/home/ggs134/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
		"/home/ggs134/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/ggs134/.config/sublime-text-3/Packages/Package Control/Package Control.sublime-settings",
		"/home/ggs134/바탕화면/practice/jsh/demo.html",
		"/home/ggs134/바탕화면/practice/jsh/script1.js"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"url",
			"board",
			"'\n",
			"				\n",
			"auto_complete",
			"ignored_package",
			"ignored",
			"vim",
			"vi",
			"li",
			"contact",
			"#contact",
			"login",
			")\">\n",
			"text"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "templates/layout.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 657,
						"regions":
						{
						},
						"selection":
						[
							[
								409,
								409
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/HTML/HTML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "flaskr.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4077,
						"regions":
						{
						},
						"selection":
						[
							[
								2818,
								2818
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1538.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "templates/board1.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 551,
						"regions":
						{
						},
						"selection":
						[
							[
								551,
								551
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "templates/board2.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 551,
						"regions":
						{
						},
						"selection":
						[
							[
								338,
								338
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "static/style.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 918,
						"regions":
						{
						},
						"selection":
						[
							[
								918,
								918
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/CSS/CSS.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "templates/show_entries.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 555,
						"regions":
						{
						},
						"selection":
						[
							[
								364,
								364
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/HTML/HTML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "templates/login.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 419,
						"regions":
						{
						},
						"selection":
						[
							[
								193,
								193
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 7,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Xdebug Client/Xdebug.tmLanguage",
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 8,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 90,
						"regions":
						{
						},
						"selection":
						[
							[
								90,
								90
							]
						],
						"settings":
						{
							"syntax": "Packages/Xdebug Client/Xdebug.tmLanguage",
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 30.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				2,
				1
			],
			[
				0,
				1,
				1,
				2
			],
			[
				1,
				1,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			0.7,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.xdebug":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "untitled.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
		"xdebug":
		{
			"hide_conflict": false,
			"restore_index":
			{
				"15":
				{
					"group": 0,
					"index": 0
				},
				"16":
				{
					"group": 0,
					"index": 1
				},
				"17":
				{
					"group": 0,
					"index": 3
				},
				"18":
				{
					"group": 0,
					"index": 4
				},
				"19":
				{
					"group": 0,
					"index": 5
				},
				"20":
				{
					"group": 0,
					"index": 6
				},
				"26":
				{
					"group": 0,
					"index": 2
				}
			},
			"restore_layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			}
		}
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 181.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
